!<arch>
ft_bzero.c      1658325013  6307  4219  100644  1499      `
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_bzero.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: liglesia <liglesia@student.madrid42.com    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/03/25 19:32:41 by liglesia          #+#    #+#             */
/*   Updated: 2022/07/20 15:50:10 by liglesia         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	ft_bzero(void *s, size_t n)
{
	unsigned int	i;
	char			*aux;

	aux = s;
	i = 0;
	while (i < n)
	{
		aux[i] = '\0';
		i++;
	}
}

/*
int	main(void)
{
    char *s = "Tiene algo dentro";
    size_t n;

    n = 6;
    ft_bzero(s, n);
    char *s = "\0\0\0\0\0\0algo dentro";
    printf("%s", s + n); // Como deja de imprimir a partir de \0, le pongo +n para probrar que sigue el resto del 
	contenido de s.
	// printf("%s", bzero(s, n)); // La función oficial
    return (0);

The bzero() function writes n zeroed bytes to the string s.  If n is
     zero, bzero() does nothing.


} */

ft_isalnum.c    1658328303  6307  4219  100644  1256      `
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isalnum.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: liglesia <liglesia@student.madrid42.com    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/03/24 15:29:57 by liglesia          #+#    #+#             */
/*   Updated: 2022/07/20 13:46:33 by liglesia         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_isalnum(int c)
{
	if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')
		|| (c >= '0' && c <= '9'))
	{
		return (1);
	}
	else
		return (0);
}

/*
#include <stdio.h>
#include <stdio.h>
#include <ctype.h>

int main(void)
{
	int c;
	c = 56;
	printf("%d\n", ft_isalnum(c));
	printf("%d", isalnum(c)); // La función oficial
	return (0);
} */ft_isalpha.c    1658317273  6307  4219  100644  1555      `
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isalpha.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: liglesia <liglesia@student.madrid42.com    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/03/24 12:16:48 by liglesia          #+#    #+#             */
/*   Updated: 2022/07/20 13:41:01 by liglesia         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_isalpha(int c)
{
	if ((c >= 'A' && c <= 'Z')
		|| (c >= 'a' && c <= 'z'))
	{
		return (1);
	}
	else
		return (0);
}

/*
#include <stdio.h>
#include <stdio.h>
#include <ctype.h>

int main(void)
{
	int c; 
	c = 130;
    printf("%d\n", ft_isalpha(c));
	printf("%d", isalpha(c)); // La función oficial
    return (0);
} 

/*
 The isalpha() function tests for any character for which isupper(3) or
     islower(3) is true.  The value of the argument must be representable as
     an unsigned char or the value of EOF.
The isalpha() function returns zero if the character tests false and
     returns non-zero if the character tests true.
*/
ft_isascii.c    1658328286  6307  4219  100644  1326      `
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isascii.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: liglesia <liglesia@student.madrid42.com    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/03/24 15:35:33 by liglesia          #+#    #+#             */
/*   Updated: 2022/07/20 16:44:41 by liglesia         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_isascii(int c)
{
	if (c >= 0 && c <= 127)
	{
		return (1);
	}
	else
		return (0);
}

/*
#include <stdio.h>
#include <stdio.h>
#include <ctype.h>

int main(void)
{
	int c; 
	c = 112;
    printf("%d\n", ft_isascii(c));
	printf("%d", isascii(c)); 
// La función oficial
    return (0);

The isascii() function tests for an ASCII character, which is any character between
     0 and octal 0177 inclusive.

} */ft_isdigit.c    1658317531  6307  4219  100644  1273      `
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isdigit.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: liglesia <liglesia@student.madrid42.com    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/03/21 18:37:06 by liglesia          #+#    #+#             */
/*   Updated: 2022/07/20 13:45:25 by liglesia         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_isdigit(int c)
{
	if (c >= '0' && c <= '9')
	{
		return (1);
	}
	else
		return (0);
}

/*
#include <stdio.h>
#include <stdio.h>
#include <ctype.h>

int main(void)
{
	int c; 
	c = X;
    printf("%d\n", ft_digit(c));
	printf("%d", isdigit(c)); // La función oficial
    return (0);
}

The isdigit() function tests for a decimal digit character (1 - 9)
 */
ft_isprint.c    1658318748  6307  4219  100644  1390      `
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isprint.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: liglesia <liglesia@student.madrid42.com    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/03/24 16:40:26 by liglesia          #+#    #+#             */
/*   Updated: 2022/07/20 14:05:47 by liglesia         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_isprint(int c)
{
	if (c >= 32 && c <= 126)
		return (1);
	else
		return (0);
}

/*
#include <stdio.h>
#include <stdio.h>
#include <ctype.h>

int main(void)
{
	int c; 
	c = 130;
    printf("%d\n", ft_isprint(c));
	printf("%d", isprint(c)); // La función oficial
    return (0);

 The isprint() function tests for any printing character, including space (` ').  The
     value of the argument must be representable as an unsigned char or the value of EOF.
	 40 - 152	
} */ft_memcpy.c     1658325278  6307  4219  100644  1632      `
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_memcpy.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: liglesia <liglesia@student.madrid42.com    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/03/25 20:05:46 by liglesia          #+#    #+#             */
/*   Updated: 2022/07/20 15:54:33 by liglesia         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	*ft_memcpy(void *dest, const void *src, size_t n)
{
	unsigned int	i;
	char			*aux1;
	const char		*aux2;		

	aux1 = dest;
	aux2 = src;
	i = 0;
	while (i < n)
	{
		aux1[i] = aux2[i];
		i++;
	}
}
/*
int main(void)
{
    char src[] = "ALOHA";
    char dest[] = "Tiene algo dentro";
    size_t n;

    n = 6;
    ft_memcpy(dest, src, n);
    printf("%s", dest);
    // printf("%s", memcopy(src, dest, n)); // La función oficial
    return (0);
}

The memcpy() function copies n bytes from memory area src to memory area
     dst.  If dst and src overlap, behavior is undefined.  Applications in
     which dst and src might overlap should use memmove(3) instead.
	 
// printf("%p\t%c\n", aux1, *aux1);	return (dest); */ft_memmove.c    1658325441  6307  4219  100644  1732      `
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_memmove.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: liglesia <liglesia@student.madrid42.com    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/03/26 12:36:25 by liglesia          #+#    #+#             */
/*   Updated: 2022/07/20 15:57:17 by liglesia         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	*ft_memmove(void *str1, const void *str2, size_t n)
{
	unsigned int	i;
	char			*aux1;
	const char		*aux2;		

	aux1 = str1;
	aux2 = str2;
	i = 0;
	if (*aux1 - *aux2 < 0)
	{
		while (i < n)
		{
			aux1[i] = aux2[i];
			i++;
		}
	}
	else
	{
		i = n - 1;
		while (i >= 0)
		{
			aux1[i] = aux2[i];
			i--;
		}
	}
	return (aux1);
}
/*
int main(void)
{
    char str1[] = "1234567";
    char str2[] = "ABCDCEFG";
    size_t n;

    n = 3; 
    ft_memmove(str1, str2, n);
    printf("%s", str1);
    printf("%p", memmove(str1, str2, n)); // La función oficial
    return (0);
}

 The memmove() function copies len bytes from string src to string dst.
     The two strings may overlap; the copy is always done in a non-destructive
     manner.

RETURN VALUES
     The memmove() function returns the original value of dst
*/ft_strlen.c     1658324159  6307  4219  100644  1386      `
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strlen.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: liglesia <liglesia@student.madrid42.com    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/03/24 16:59:32 by liglesia          #+#    #+#             */
/*   Updated: 2022/07/20 15:35:53 by liglesia         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

size_t	ft_strlen(char *str)
{
	size_t	len;
	int		i;

	len = 0;
	i = 0;
	while (str[i] != '\0')
	{
		i++;
		len++;
	}
	return (len);
}

/*
int main(void)
{
	char str[] = "Ay Ay que ya me sale"; 
	
    printf("%lu\n", ft_strlen(str));
	printf("%lu", strlen(str)); // La función oficial
    return (0);

The strlen() function computes the length of the string s.
     The strlen() function returns the number of characters that precede the
     terminating NUL character.
} */